@startuml horusec-platform-c3
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Context.puml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml

LAYOUT_WITH_LEGEND()

Person(developer, "Member (Developer/QA)", "Horusec basic user, has only permission to read about workspaces and repositories.")
Person(supervisor, "Supervisor (AppSec/TechLead)", "User with specific permission for repositories, can manage vulnerabilities and reading operations.")
Person(admin, "Administrator (PO/Head)", "User with the highest level of Horusec permissions, has all permissions for writing and reading.")
Person(applicationAdmin, "Application Administrator (CTO/Principal)", "Special optional user who has all administrator permissions, if activated it can create new workspaces, removing this permission from the default administrator.")

Rel(developer, horusecManager, "Search workspaces and repositories, view vulnerabilities and dashboards from repositories it has permissions to.")
Rel(supervisor, horusecManager, "Search workspaces and repositories, manage vulnerabilities and dashboards from repositories it has permissions to.")
Rel(admin, horusecManager, "Permission to write in workspaces and repositories, token creation, vulnerabilities management, workspace and repositories dashboards.")
Rel(applicationAdmin, horusecManager, "Permission to write in workspaces and repositories, token creation, vulnerabilities management, workspace and repositories dashboards.")

System_Boundary(horusecManager, "Horusec Manager") {
        System(managerLoginScreen, "Login operations", "Login screen, account creation and password recovery.")
        System(workspaceCreation, "Workspace Creation", "Creation of workspaces for organization.")
        System(accountConfig, "Configuration", "Possibility to change language and password, account deletion.")

        Rel(managerLoginScreen, workspaceCreation, "After login it is possible to create a workspace.")
        Rel(managerLoginScreen, accountConfig, "After login it is possible to change account configurations.")

        System(dashboard, "Dashboard", "Analytical view of vulnerabilities data.")
        System(vulnManagement, "Vulnerabilities Management", "Status and vulnerability type alterations.")
        System(tokens, "Tokens", "Creation and deletion of tokens.")
        System(users, "Users", "Invite and remove user permissions")
        System(webhooks, "Webhooks", "Create, edit and delete webhooks.")

        Rel(workspaceCreation, dashboard, "View workspace dashboard")
        Rel(workspaceCreation, vulnManagement, "Workspace vulnerability management")
        Rel(workspaceCreation, tokens, "Workspace tokens management")
        Rel(workspaceCreation, users, "User management with access to the workspace and their permissions")
        Rel(workspaceCreation, webhooks, "Webhooks management on workspace level")

        System(repositoryCreation, "Repository creation", "Creation of repositories for workspaces.")

        Rel(workspaceCreation, repositoryCreation, "After the creation of a workspace it is possible to add repositories to it.")

        Rel(repositoryCreation, dashboard, "View repository dashboard")
        Rel(repositoryCreation, vulnManagement, "Repository vulnerability management")
        Rel(repositoryCreation, tokens, "Repository token management")
        Rel(repositoryCreation, users, "User management with access to the repository and their permissions")
        Rel(repositoryCreation, webhooks, "Webhooks management on repository level")
}

System_Boundary(horusecAuth, "Horusec Auth") {
        System(accountController, "Account Controller", "Contains account operations.")
        System(authenticationController, "Authentication Controller", "Contains login operations and request authentications.")
        System(healthController, "Health Check", "Responsible to verify the application's health.")
        System(authTypes, "Authentication Types", "Service has support to 3 different types of authentication (native, LDAP, Keycloak)")

        Rel(authenticationController, authTypes, "Validates the requests authenticity according to the authentication type")
}


System_Boundary(horusecCLI, "Horusec CLI"){
        System_Ext(vulnDetection, "Vulnerability detection", "Executes a static analysis for vulnerabilities.")
        System_Ext(vulnProcessing, "Processing and send", "Vulnerabilities are processed, and if CLI has a token, the vulnerabilities are sent to the API.")

        Rel(vulnDetection, vulnProcessing, "")
}

System_Boundary(horusecApi, "Horusec Api") {
        System(analysisController, "analysis controller", "Resposible for receiving the vulnerabilities from CLI.")
        System(tokenValidation, "Token Validation", "Will validate if the token from that request is valid, and identify to which repository it belongs to.")

        Rel(analysisController, tokenValidation, "")
}

Rel(horusecCLI, horusecApi, "Send vulnerabilities data via HTTP.")


System_Boundary(horusecAnalytic, "Horusec Analytic") {
        System(vulnProcess, "Vulnerability Processing", "Receives an analysis via queue and processes it to save in the database.")
        System(workspaceAnalyticController, "Dashboard Workspace Controller", "Had a specific controller to fetch data on the workspace view.")
        System(repositoryAnalyticController, "Dashboard Repository Controller", "Had a specific controller to fetch data on the repository view.")
        System(healthController, "Health Check", "Responsible to check the application's health.")
}

System_Boundary(horusecCore, "Horusec Core") {
        System(healthController, "Health Check", "Responsible to check the application's health.")
        System(vulnProcess, "Workspaces Controller", "Contains workspace creation and management operations, it can define which users have permission to it, and token creation.")
        System(vulnProcess, "Repositories Controller", "Contains repository creation and management operations, it can define which users have permission to it, and token creation.")
}

System_Boundary(horusecMessages, "Horusec Messages") {
        System(messagesEventListener, "Events Listener", "Consumes data packs from a queue, that will be converted to email.")
        System(emailController, "Email Processor", "Responsible to identify the type of message and fill the email with the data sent and the desired template.")
        System(emailTemplates, "Email Templates", "Set of pre defined dynamic templates.")

        Rel(messagesEventListener, emailController, "")
        Rel(emailTemplates, emailController, "")
}

System_Boundary(horusecVulnerability, "Horusec Vulnerability") {
        System(vulManagement, "Vulnerability Controller", "Responsible to make modifications in the vulnerabilities reported by Horusec, such as: Change type (False positive, risk accepted), Severity change (Low, Medium...)")
        System(publishChanges, "Publication of Changes", "Every change in analysis data is saved in the base and sent to analitycal to be processed.")
}

System_Boundary(horusecWebhook, "Horusec Webhook") {
        System(webhookEventListener, "Events Listener", "Consumes analysis data packs from a queue, that will be sent through a webhook.")
        System(webhookController, "Events Listener", "Verifies the existence of a webhook, if it exists the package is sent to it via HTTP, otherwise it is just ignored.")

        Rel(webhookEventListener, webhookController, "")
}

ContainerDb(horusecPlatformDatabase, "Platform Database", "(Postgresql)", "Stores analysis data.")
Rel(horusecAuth, horusecPlatformDatabase, "")
Rel(horusecVulnerability, horusecPlatformDatabase, "")
Rel(horusecCore, horusecPlatformDatabase, "")
Rel(horusecWebhook, horusecPlatformDatabase, "")
Rel(horusecApi, horusecPlatformDatabase, "Stores data from new analysis received by CLI.")

ContainerDb(horusecAnalyticDatabase, "Database-Analytic", "(Postgresql)", "Stores dashboard data.")
Rel(horusecAnalytic, horusecAnalyticDatabase, "Sent processed data to the database")

Rel(horusecManager, horusecAuth, "")
Rel(horusecManager, horusecVulnerability, "")
Rel(horusecManager, horusecCore, "")
Rel(horusecManager, horusecWebhook, "")
Rel(horusecManager, horusecAnalytic, "")

Rel(horusecAuth, horusecMessages, "")
Rel(horusecCore, horusecMessages, "")

Rel(horusecVulnerability, horusecAnalytic, "Pack is published via RabbitMQ to analytical.")

System_Ext(externalAPP, "External Application", "External application that will receive analysis data from Horusec.")
Rel(horusecWebhook, externalAPP, "analysis data are sent via HTTP.")

@enduml