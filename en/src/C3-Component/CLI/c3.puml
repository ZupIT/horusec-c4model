@startuml horusec-cli-c3
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Context.puml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Deployment.puml
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Dynamic.puml

LAYOUT_WITH_LEGEND()

Person(user, "Developer / CICD Pipeline", "Any user who interacts directly with the software's source code.")

System_Boundary(horusecCLI, "Horusec-CLI") {
    System_Boundary(commandStart, "Command 'Start'") {
      System_Boundary(commandStartPhase1, "Sets project's configurations") {
        System(commandStartPhase1_1, "Acquire configuration file settings", "Right after it overwrites the previous settings")
        System(commandStartPhase1_2, "Acquire the environment variable settings", "Right after it overwrites the previous settings")
        System(commandStartPhase1_3, "Acquire flags settings", "Right after it overwrites the previous settings")
      }
      System(commandStartPhase2, "Verifies if the user has not passed the analysis directory", "If it does not have the information, it should ask before starting the analysis")
      System(commandStartPhase3, "Normalizes settings and perform input validation", "Validation may be: Invalid directory, Requirements not met, and others")
      System(commandStartPhase4, "Verifies which programming languages are in the project", "Besides identifying, it filters the languages supported by the tool")
      System_Boundary(commandStartPhase5, "Start analysis") {
        System(commandStartPhase5_1, "Starts detection of security flaws for each programming language asynchronously", "")
        System(commandStartPhase5_2, "Does a download of a docker image exists for the language?", "In the analysis it verifies if the user asked to disable the docker, if yes, this step is ignored")
        System(commandStartPhase5_3, "Starts downloading the image", "This step may be skipped if the option to disable docker is activated")
        System(commandStartPhase5_4, "Starts the process to analyze the necessary tools.", "When starting this process, it verifies which tool is used")
        System(commandStartPhase5_5, "Market tools that use docker", "This step may be skipped if the option to disable docker is activated")
        System(commandStartPhase5_6, "Tools created by Horusec that use Horusec-Engine", "This process verifies the available rules in the binary, if the userpassed any external rules, and will start the analysis.")
        System(commandStartPhase5_7, "Centralization of the data about possible security flaws via memory reference", "")
        System(commandStartPhase5_8, "After all programming languages finish their analysis, data normalization has to be performed", "Normalization are validations such as false positives, minimum severity to report, others.")
      }
      System_Boundary(commandStartPhase6, "analysis delivery and sinchronization with the web application") {
        System(commandStartPhase6_1, "Is there an authorization token?", "")
        System(commandStartPhase6_2, "Sends analysis to web application", "")
        System(commandStartPhase6_3, "Acquires the analysis treated by web application", "Treatments may vary between vulnerability types and severity levels changed via web application")
        System(commandStartPhase6_4, "Overwrites the analysis performed by CLI", "")
      }
      System(commandStartPhase7, "Creates the analysis output", "The output may vary between: terminal, text, json, sonarqube")
    }
    System_Boundary(commandGenerate, "Command 'Generate'") {
      System(commandGeneratePhase1, "Does the configuration file already exists?", "")
      System(commandGeneratePhase2_1, "Verifies if a configuration was not made and adds the default ones", "")
      System(commandGeneratePhase2_2, "Creates and writes the default configurations in the file", "")
    }

    System_Boundary(commandVersion, "Command 'Version'") {
      System(commandVersionPhase1, "Shows the current version of horusec-cli", "")
    }
}

System_Boundary(horusecPlatform, "Horusec-Platform") {
    System_Boundary(horusecPlatformAPI, "Micro-service Horusec-API") {
      System_Boundary(horusecPlatformAPIRotaGet, "Micro-service Horusec-API Route [GET /api/analysis/{ID}]") {
        System(horusecPlatformAPIRotaGetPhase1, "Authorization validation", "")
        System(horusecPlatformAPIRotaGetPhase2, "Acquire system analysis", "")
        System(horusecPlatformAPIRotaGetPhase3, "Returns success or error when acquiring the analysis", "")
      }
      System_Boundary(horusecPlatformAPIRotaPost, "Micro-service Horusec-API Route [POST /api/analysis]") {
        System(horusecPlatformAPIRotaPostPhase1, "Authorization validation", "")
        System(horusecPlatformAPIRotaPostPhase2, "Data entry validation", "")
        System(horusecPlatformAPIRotaPostPhase3, "Does hash from vulnerabilities exist in the repository ?", "")
        System(horusecPlatformAPIRotaPostPhase4, "Not necessary to insert vulnerability again in the application", "")
        System(horusecPlatformAPIRotaPostPhase5, "Inserts new vulnerability in the application", "")
        System(horusecPlatformAPIRotaPostPhase6, "analysis delivery to necessary services", "")
        System(horusecPlatformAPIRotaPostPhase7, "Returns success or error in analysis insertion", "")
      }
    }

    ComponentQueue(horusecPlatformRabbitMQ, "Message Broker", "RabbitMQ:3", "Message service")
    ContainerDb(HorusecPlatformDatabase, "Database-Platform", "[Container: Postgresql:12]", "Stores new analysis in platform database")
    ContainerDb(HorusecAnalyticDatabase, "Database-Analytic", "[Container: Postgresql:12]", "Stores dashboard data")

    System_Boundary(horusecPlatformWebhook, "Micro-service Horusec-Webhook") {
      System(horusecPlatformWebhookPhase1, "Receipt of analysis via message service", "")
      System(horusecPlatformWebhookPhase2, "Acquire repository's webhook", "")
      System(horusecPlatformWebhookPhase3, "Does the repository have a configured webhook ?", "")
      System(horusecPlatformWebhookPhase4, "Assemble HTTP request and trigger to third party destination", "")
      System(horusecPlatformWebhookPhase5, "Enable to consume next pack", "")
    }

    System_Boundary(horusecPlatformAnalytic, "Micro-service Horusec-Analytic") {
      System(horusecPlatformAnalyticPhase1, "Receipt of analysis via message service", "")
      System(horusecPlatformAnalyticPhase2, "Validate data from analytic parsing the analysis for each graphic from the dashboard screen", "")
      System(horusecPlatformAnalyticPhase3, "Insert data on their respective tables", "")
      System(horusecPlatformAnalyticPhase4, "Enable to consume next pack", "")
    }
}

System_Ext(responseGenerate, "Response", "Returns success or errora according to performed configurations", "")

Rel(user, commandStartPhase1_1, "Start an analysis")
Rel(commandStartPhase1_1, commandStartPhase1_2, "")
Rel(commandStartPhase1_2, commandStartPhase1_3, "")
Rel(commandStartPhase1_3, commandStartPhase2, "")
Rel(commandStartPhase2, commandStartPhase3, "")
Rel(commandStartPhase3, commandStartPhase4, "")
Rel(commandStartPhase4, commandStartPhase5_1, "")
Rel(commandStartPhase5_1, commandStartPhase5_2, "")
Rel(commandStartPhase5_2, commandStartPhase5_3, "YES")
Rel(commandStartPhase5_2, commandStartPhase5_4, "NO")
Rel(commandStartPhase5_3, commandStartPhase5_4, "")
Rel(commandStartPhase5_4, commandStartPhase5_5, "")
Rel(commandStartPhase5_4, commandStartPhase5_6, "")
Rel(commandStartPhase5_5, commandStartPhase5_7, "")
Rel(commandStartPhase5_6, commandStartPhase5_7, "")
Rel(commandStartPhase5_7, commandStartPhase5_8, "")
Rel(commandStartPhase5_8, commandStartPhase6_1, "")
Rel(commandStartPhase6_1, commandStartPhase6_2, "YES")
Rel(commandStartPhase6_1, commandStartPhase7, "NO")
Rel(commandStartPhase6_2, commandStartPhase6_3, "")
Rel(commandStartPhase6_3, commandStartPhase6_4, "")
Rel(commandStartPhase6_4, commandStartPhase7, "")
Rel(commandStartPhase7, responseGenerate, "")


Rel(commandStartPhase6_2, horusecPlatformAPIRotaPostPhase1, "")
Rel(horusecPlatformAPIRotaPostPhase1, horusecPlatformAPIRotaPostPhase2, "")
Rel(horusecPlatformAPIRotaPostPhase2, horusecPlatformAPIRotaPostPhase3, "")
Rel(horusecPlatformAPIRotaPostPhase3, horusecPlatformAPIRotaPostPhase4, "YES")
Rel(horusecPlatformAPIRotaPostPhase3, horusecPlatformAPIRotaPostPhase5, "NO")
Rel(horusecPlatformAPIRotaPostPhase4, horusecPlatformAPIRotaPostPhase6, "")
Rel(horusecPlatformAPIRotaPostPhase5, horusecPlatformAPIRotaPostPhase6, "")
Rel(horusecPlatformAPIRotaPostPhase6, horusecPlatformAPIRotaPostPhase7, "")
Rel(horusecPlatformAPIRotaPostPhase6, horusecPlatformRabbitMQ, "")
Rel(horusecPlatformAPIRotaPostPhase5, HorusecPlatformDatabase, "")
Rel(commandStartPhase6_3, horusecPlatformAPIRotaGetPhase1, "")
Rel(horusecPlatformAPIRotaGetPhase1, horusecPlatformAPIRotaGetPhase2, "")
Rel(horusecPlatformAPIRotaGetPhase2, HorusecPlatformDatabase, "")
Rel(horusecPlatformAPIRotaGetPhase2, horusecPlatformAPIRotaGetPhase3, "")

Rel(horusecPlatformRabbitMQ, horusecPlatformWebhookPhase1, "")
Rel(horusecPlatformWebhookPhase1, horusecPlatformWebhookPhase2, "")
Rel(horusecPlatformWebhookPhase2, horusecPlatformWebhookPhase3, "")
Rel(horusecPlatformWebhookPhase2, HorusecPlatformDatabase, "")
Rel(horusecPlatformWebhookPhase3, horusecPlatformWebhookPhase4, "YES")
Rel(horusecPlatformWebhookPhase4, horusecPlatformWebhookPhase5, "")
Rel(horusecPlatformWebhookPhase3, horusecPlatformWebhookPhase5, "NO")

Rel(horusecPlatformRabbitMQ, horusecPlatformAnalyticPhase1, "")
Rel(horusecPlatformAnalyticPhase1, horusecPlatformAnalyticPhase2, "")
Rel(horusecPlatformAnalyticPhase2, horusecPlatformAnalyticPhase3, "")
Rel(horusecPlatformAnalyticPhase3, horusecPlatformAnalyticPhase4, "")
Rel(horusecPlatformAnalyticPhase3, HorusecAnalyticDatabase, "")

Rel(user, commandGeneratePhase1, "Generate a configuration file")
Rel(commandGeneratePhase1, commandGeneratePhase2_1, "Yes")
Rel(commandGeneratePhase1, commandGeneratePhase2_2, "No")
Rel(commandGeneratePhase2_1, responseGenerate, "")
Rel(commandGeneratePhase2_2, responseGenerate, "")


Rel(user, commandVersionPhase1, "Acquire the current version of the system")
Rel(commandVersionPhase1, responseGenerate, "")

@enduml